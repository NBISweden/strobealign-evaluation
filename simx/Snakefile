configfile: "config.yaml"

MODES = config.get("modes", ("align", "map"))
ENDS = config.get("ends", ("se", "pe"))
DATASETS = config["datasets"]
GENOMES = config["genomes"]
READ_LENGTHS = config["read-lengths"]

VERSIONS = {}
for version in config.get("versions", []):
    key = version["commit"]
    if arg := version.get("arguments", ""):
        key += "-" + arg.replace(" ", "").replace("-", "").replace("=", "")
    VERSIONS[key] = {
        "commit": version["commit"],
        "arguments": f" {arg}" if arg else "",
        "name": version["name"],
        "color": version["color"],
        "binary": f"bin/strobealign/{version['commit']}",
    }

PROGRAMS = expand("strobealign-{key}", key=VERSIONS.keys())
if config["programs"]:
    PROGRAMS.extend(config["programs"])
PLOTS = ("accuracy", "aligned", "time", "memory")
# For reads shorter than this, the evaluation includes paired-end data
LONG_READ_LENGTH = 1000

import itertools

localrules:
    result_csv, concat_csvs, concat_genome_csvs, plot_ends, plot_genomes, download_xmapper

rule final:
    input:
        expand("plots/ends-{ends}-{plot}.pdf", ends=ENDS, plot=PLOTS),
        expand("plots/genome-{genome}-{plot}.pdf", genome=GENOMES, plot=PLOTS),
        "result.csv"


# Map reads with BWA-MEM

rule bwa_index:
    output:
        "{genome}.fa.amb",
        "{genome}.fa.ann",
        "{genome}.fa.bwt",
        "{genome}.fa.pac",
        "{genome}.fa.sa"
    input: "{genome}.fa"
    shell:
        "bwa index {input}"


rule bwa_mem_single_end:
    output:
        bam=temp("runs/bwamem/{dataset}-{genome}-{read_length}/se.bam")
    input:
        fasta="genomes/{genome}.fa",
        index="genomes/{genome}.fa.bwt",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    threads: 8
    log:
        "runs/bwamem/{dataset}-{genome}-{read_length}/se.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bwa mem -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

rule bwa_mem_paired_end:
    output:
        bam=temp("runs/bwamem/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        fasta="genomes/{genome}.fa",
        index="genomes/{genome}.fa.bwt",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    threads: 8
    log:
        "runs/bwamem/{dataset}-{genome}-{read_length}/pe.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bwa mem -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


# Map reads with minimap2

rule minimap2_index:
    output: "genomes/{genome}.fa.{profile}.mm2index"
    input: "genomes/{genome}.fa"
    threads: 8
    shell:
        "minimap2 -x {wildcards.profile} -t {threads} -d {output} {input}"


def minimap2_profile(wildcards):
    """
    minimap2â€™s sr (short reads) profile is advantageous up to
    approximately read length 500
    """
    return "sr" if int(wildcards.read_length) <= 500 else "lr:hq"


def minimap2_index(wildcards):
    profile = minimap2_profile(wildcards)
    return f"genomes/{wildcards.genome}.fa.{profile}.mm2index"


rule minimap2_single_end:
    output:
        bam=temp("runs/minimap2/{dataset}-{genome}-{read_length}/se.bam")
    input:
        index=minimap2_index,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    log:
        "runs/minimap2/{dataset}-{genome}-{read_length}/se.bam.log"
    params: profile=minimap2_profile
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -x {params.profile} -a -t {threads} {input.index} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule minimap2_paired_end:
    output:
        bam=temp("runs/minimap2/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        index=minimap2_index,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    log:
        "runs/minimap2/{dataset}-{genome}-{read_length}/pe.bam.log"
    params: profile=minimap2_profile
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -x {params.profile} -a -t {threads} --frag=yes {input.index} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule minimap2_paf_single_end:
    output:
        paf=temp("runs/minimap2/{dataset}-{genome}-{read_length}/se.paf.gz")
    input:
        index=minimap2_index,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    log:
        "runs/minimap2/{dataset}-{genome}-{read_length}/se.paf.log"
    params: profile=minimap2_profile
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -x {params.profile} -t {threads} {input.index} {input.r1_fastq} 2> {log}.tmp"
        " | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


rule minimap2_paf_paired_end:
    output:
        paf=temp("runs/minimap2/{dataset}-{genome}-{read_length}/pe.paf.gz")
    input:
        index=minimap2_index,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    log:
        "runs/minimap2/{dataset}-{genome}-{read_length}/pe.paf.log"
    params: profile=minimap2_profile
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -x {params.profile} -t {threads} --frag=yes {input.index} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


# Map reads with x-mapper

rule download_xmapper:
    output:
        bin="bin/x-mapper-1.1.0-beta13.jar"
    shell:
        "cd bin && wget https://github.com/mathjeff/Mapper/releases/download/1.1.0-beta13/x-mapper-1.1.0-beta13.jar"

rule xmapper_single_end:
    output:
        bam=temp("runs/xmapper/{dataset}-{genome}-{read_length}/se.bam")
    input:
        binary="bin/x-mapper-1.1.0-beta13.jar",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    log:
        "runs/xmapper/{dataset}-{genome}-{read_length}/se.bam.log"
    threads: 8
    shell:
        # TODO
        # X-Mapper outputs multiple primary alignments, which sometimes differ
        # by score. The following option possibly achieves that no
        # suboptimal alignments are output, but we found it too late. Instead,
        # these are filtered out in get_accuracy.py.
        # " --max-penalty-span 0"
        "cat {input} > /dev/null; "
        "/usr/bin/time -v"
        " java -Xms200m -Xmx48g"
        " -jar {input.binary}"
        " --num-threads {threads}"
        " --out-sam /dev/stdout"
        " --reference {input.fasta}"
        " --queries {input.r1_fastq}"
        " 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools sort -n --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

rule xmapper_paired_end:
    output:
        bam=temp("runs/xmapper/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        binary="bin/x-mapper-1.1.0-beta13.jar",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    params:
        spacing=lambda wildcards: 300 - 2 * int(wildcards.read_length) if int(wildcards.read_length) < 250 else 700 - 2 * int(wildcards.read_length)
    log:
        "runs/xmapper/{dataset}-{genome}-{read_length}/pe.bam.log"
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v"
        " java -Xms200m -Xmx48g"
        " -jar {input.binary}"
        " --num-threads {threads}"
        " --out-sam /dev/stdout"
        " --reference {input.fasta}"
        " --paired-queries {input.r1_fastq} {input.r2_fastq}"
        "  --spacing {params.spacing} 50"
        " 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools sort -n --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule compile_strobealign:
    output: "bin/strobealign/{commit}"
    threads: 4
    shell:
        """
        wget https://github.com/ksahlin/strobealign/archive/{wildcards.commit}.zip
        unzip -d strobealign-{wildcards.commit} {wildcards.commit}.zip
        rm {wildcards.commit}.zip
        cd strobealign-{wildcards.commit}/*
        cmake -B build -DCMAKE_C_FLAGS="-march=native" -DCMAKE_CXX_FLAGS="-march=native"
        make -j {threads} -C build strobealign
        mv build/strobealign ../../{output}
        cd ../..
        rm -rf strobealign-{wildcards.commit}
        """

rule compile_strobealign_rs:
    output: "bin/strobealign-rs/{commit}"
    threads: 8
    shell:
        """
        wget https://github.com/marcelm/rstrobes/archive/{wildcards.commit}.zip
        unzip -d rstrobes-{wildcards.commit} {wildcards.commit}.zip
        rm {wildcards.commit}.zip
        cd rstrobes-{wildcards.commit}/*
        cargo build --release
        mv target/release/rstrobes ../../{output}
        cd ../..
        rm -rf rstrobes-{wildcards.commit}
        """

# Map reads with strobealign

rule strobealign_paired_end:
    output:
        bam=temp("runs/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        binary=lambda wildcards: VERSIONS[wildcards.program]["binary"],
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    params:
        extra_args=lambda wildcards: VERSIONS[wildcards.program]["arguments"]
    threads: 8
    log:
        "runs/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v {input.binary}{params.extra_args} -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule strobealign_single_end:
    output:
        bam=temp("runs/strobealign-{program}/{dataset}-{genome}-{read_length}/se.bam")
    input:
        binary=lambda wildcards: VERSIONS[wildcards.program]["binary"],
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    params:
        extra_args=lambda wildcards: VERSIONS[wildcards.program]["arguments"]
    threads: 8
    log:
        "runs/strobealign-{program}/{dataset}-{genome}-{read_length}/se.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v {input.binary}{params.extra_args} -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule strobealign_paf_paired_end:
    output:
        paf=temp("runs/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.paf.gz")
    input:
        binary=lambda wildcards: VERSIONS[wildcards.program]["binary"],
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    params:
        extra_args=lambda wildcards: VERSIONS[wildcards.program]["arguments"]
    threads: 8
    log:
        "runs/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.paf.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v {input.binary}{params.extra_args} -x -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


rule strobealign_paf_single_end:
    output:
        paf=temp("runs/strobealign-{program}/{dataset}-{genome}-{read_length}/se.paf.gz")
    input:
        binary=lambda wildcards: VERSIONS[wildcards.program]["binary"],
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    params:
        extra_args=lambda wildcards: VERSIONS[wildcards.program]["arguments"]
    threads: 8
    log:
        "runs/strobealign-{program}/{dataset}-{genome}-{read_length}/se.paf.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v {input.binary}{params.extra_args} -x -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


rule bam_accuracy:
    output:
        txt="runs/{program}/{dataset}-{genome}-{read_length}/{ends}.bam.accuracy.txt"
    input:
        truth="datasets/{dataset}/{genome}-{read_length}/truth.bam",
        bam="runs/{program}/{dataset}-{genome}-{read_length}/{ends}.bam",
    params:
        only_r1=lambda w: " --only-r1" if w.ends == "se" else "",
        extra=lambda w: " --multiple-primary --synthesize-unmapped" if w.program == "xmapper" else ""
    shell:
        "python get_accuracy.py{params.extra}{params.only_r1} --truth {input.truth} --predicted_sam {input.bam} > {output.txt}.tmp"
        "\n mv -v {output.txt}.tmp {output.txt}"


rule paf_accuracy:
    output:
        txt="runs/{program}/{dataset}-{genome}-{read_length}/{ends}.paf.accuracy.txt"
    input:
        truth="datasets/{dataset}/{genome}-{read_length}/truth.bam",
        paf="runs/{program}/{dataset}-{genome}-{read_length}/{ends}.paf.gz"
    params:
        only_r1=lambda w: " --only-r1" if w.ends == "se" else ""
    shell:
        "python get_accuracy.py{params.only_r1} --truth {input.truth} --predicted_paf {input.paf} > {output.txt}.tmp"
        "\n mv -v {output.txt}.tmp {output.txt}"

rule count_reads_se:
    output:
        txt="datasets/{dataset}/{genome}-{read_length}/se.readcount.txt",
    input:
        fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz"
    shell:
        "echo $[ $(zcat {input.fastq} | wc -l) / 4 ] > {output}"

rule count_reads_pe:
    output:
        txt="datasets/{dataset}/{genome}-{read_length}/pe.readcount.txt",
    input:
        fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz"
    shell:
        "echo $[ $(zcat {input.fastq} | wc -l) / 2 ] > {output}"

rule result_csv:
    output:
        csv="csv/{prog}/{dataset}-{genome}-{read_length}/{ends}.{bampaf}.csv"
    input:
        txt="runs/{prog}/{dataset}-{genome}-{read_length}/{ends}.{bampaf}.accuracy.txt",
        read_count="datasets/{dataset}/{genome}-{read_length}/{ends}.readcount.txt",
        log="runs/{prog}/{dataset}-{genome}-{read_length}/{ends}.{bampaf}.log",
    params:
        typ=lambda wildcards: "map" if wildcards.bampaf == "paf" else "align"
    shell:
        """
        echo -n {wildcards.prog},{params.typ},{wildcards.dataset},{wildcards.genome},{wildcards.ends},{wildcards.read_length}, > {output.csv}.tmp
        echo -n $(< {input.read_count}), >> {output.csv}.tmp
        cut -f1,3 {input.txt} | tr '\\t' , | tr -d '\\n' >> {output.csv}.tmp
        echo -n , >> {output.csv}.tmp
        cut -f2,4,5 {input.txt} | tr '\\t' , | tr -d '\\n' >> {output.csv}.tmp
        user_time=$(awk '/User time/ {{print $NF}}' {input.log})
        memory=$(awk '/Maximum resident/ {{print $NF/1048576}}' {input.log})
        indexing_time=$(awk '/Total time indexing:/ {{print $4}}' {input.log})
        mapping_time=$(awk '/Total time mapping:/ {{print $4}}' {input.log})
        if test -z "${{mapping_time}}"; then mapping_time=$(sed -n -e 's|.* Real time: \\([1-9][0-9.]*\\) sec.*|\\1|p' {input.log}); fi
        if test -z "${{mapping_time}}"; then mapping_time=$(awk '/^Processing query/ && $3 >= 10000 && t == 0 {{t=substr($5, 1, length($5)-1);}}; /^Done in/ {{total=substr($3, 1, length($3)-2)}}; END{{print total-t}}' {input.log}); fi
        echo ,${{mapping_time}},${{memory}} >> {output}.tmp
        mv {output.csv}.tmp {output.csv}
        """

def csvs(wildcards):
    files = []
    if "align" in MODES:
        for prog, dataset, read_length in itertools.product(PROGRAMS, DATASETS, READ_LENGTHS):
            if read_length >= LONG_READ_LENGTH and wildcards.ends == "pe":
                continue
            if prog == "xmapper" and read_length >= LONG_READ_LENGTH:
                continue
            if prog == "xmapper" and wildcards.genome == "rye":
                # X-Mapper crashes on rye
                continue
            files.append(f"csv/{prog}/{dataset}-{wildcards.genome}-{read_length}/{wildcards.ends}.bam.csv")
    if "map" in MODES:
        if wildcards.ends == "se":
               read_lengths = READ_LENGTHS
        else:
            read_lengths = [rl for rl in READ_LENGTHS if rl < LONG_READ_LENGTH]
        files += expand(
            f"csv/{{prog}}/{{dataset}}-{wildcards.genome}-{{read_length}}/{wildcards.ends}.paf.csv",
            prog=(prog for prog in PROGRAMS if prog not in {"bwamem", "xmapper"}), dataset=DATASETS, read_length=read_lengths
        )
    return files


rule concat_csvs:
    output: "csv/{genome,([^/]*)}-{ends,(se|pe)}.csv"
    input: csvs
    shell:
        "( echo tool,mode,dataset,genome,ends,read_length,read_count,aligned,overaligned,accuracy,jaccuracy,saccuracy,time,memory ; cat {input} ) > {output}"


rule concat_genome_csvs:
    output: "result.csv"
    input: expand("csv/{genome}-{ends}.csv", ends=ENDS, genome=GENOMES)
    shell:
        "( head -n 1 {input[0]} ; for f in {input}; do sed 1d $f; done ) > {output}"

rule plot_ends:
    output: expand("plots/ends-{end}-{plot}.pdf", end=ENDS, plot=PLOTS)
    input:
        csv="result.csv",
        config="config.yaml",
    shell:
        "python plots.py -c {input.config} {input.csv} plots/"

rule plot_genomes:
    output: expand("plots/genome-{genome}-{plot}.pdf", genome=GENOMES, plot=PLOTS)
    input:
        csv="result.csv",
        config="config.yaml",
    shell:
        "python plots.py --genome -c {input.config} {input.csv} plots/"
