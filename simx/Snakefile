configfile: "config.yaml"

DATASETS = config["datasets"]
GENOMES = config["genomes"]
READ_LENGTHS = config["read-lengths"]
COMMITS = config["commits"]

LIBRARIES = expand("{dataset}-{genome}-{read_length}", dataset=DATASETS, genome=GENOMES, read_length=READ_LENGTHS)
ENDS = ("se", "pe")
PROGRAMS = expand("strobealign-{commit[key]}", commit=COMMITS) + config["programs"]
PLOTS = ("accuracy", "aligned", "time", "memory")

COMMIT_TO_HASH_MAP = {c["key"]: c["hash"] for c in COMMITS}

localrules:
    result_csv, concat_csvs, concat_genome_csvs, plot_ends, plot_genomes, download_xmapper

rule final:
    input:
        expand("plots/ends-{ends}-{plot}.pdf", ends=ENDS, plot=PLOTS),
        expand("plots/genome-{genome}-{plot}.pdf", genome=GENOMES, plot=PLOTS),
        "results/result.csv"


# Map reads with BWA-MEM

rule bwa_index:
    output:
        "{genome}.fa.amb",
        "{genome}.fa.ann",
        "{genome}.fa.bwt",
        "{genome}.fa.pac",
        "{genome}.fa.sa"
    input: "{genome}.fa"
    shell:
        "bwa index {input}"


rule bwa_mem_single_end:
    output:
        bam=temp("results/bwamem/{dataset}-{genome}-{read_length}/se.bam")
    input:
        fasta="genomes/{genome}.fa",
        index="genomes/{genome}.fa.bwt",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    threads: 8
    log:
        "results/bwamem/{dataset}-{genome}-{read_length}/se.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bwa mem -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

rule bwa_mem_paired_end:
    output:
        bam=temp("results/bwamem/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        fasta="genomes/{genome}.fa",
        index="genomes/{genome}.fa.bwt",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    threads: 8
    log:
        "results/bwamem/{dataset}-{genome}-{read_length}/pe.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bwa mem -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


# Map reads with minimap2

rule minimap2_index:
    output: "genomes/{genome}.fa.mm2index"
    input: "genomes/{genome}.fa"
    threads: 8
    shell:
        "minimap2 -t {threads} -k 21 -w 11 -d {output} {input}"


rule minimap2_single_end:
    output:
        bam=temp("results/minimap2/{dataset}-{genome}-{read_length}/se.bam")
    input:
        index=rules.minimap2_index.output,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    log:
        "results/minimap2/{dataset}-{genome}-{read_length}/se.bam.log"
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -t {threads} -a -x sr {input.index} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule minimap2_paired_end:
    output:
        bam=temp("results/minimap2/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        index=rules.minimap2_index.output,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    log:
        "results/minimap2/{dataset}-{genome}-{read_length}/pe.bam.log"
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -t {threads} -a -x sr {input.index} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule minimap2_paf_single_end:
    output:
        paf=temp("results/minimap2/{dataset}-{genome}-{read_length}/se.paf.gz")
    input:
        index=rules.minimap2_index.output,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    log:
        "results/minimap2/{dataset}-{genome}-{read_length}/se.paf.log"
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -t {threads} -x sr {input.index} {input.r1_fastq} 2> {log}.tmp"
        " | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


rule minimap2_paf_paired_end:
    output:
        paf=temp("results/minimap2/{dataset}-{genome}-{read_length}/pe.paf.gz")
    input:
        index=rules.minimap2_index.output,
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    log:
        "results/minimap2/{dataset}-{genome}-{read_length}/pe.paf.log"
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v minimap2 -t {threads} -x sr {input.index} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


# Map reads with x-mapper

rule download_xmapper:
    output:
        bin="bin/x-mapper-1.1.0-beta13.jar"
    shell:
        "cd bin && wget https://github.com/mathjeff/Mapper/releases/download/1.1.0-beta13/x-mapper-1.1.0-beta13.jar"

rule xmapper_single_end:
    output:
        bam=temp("results/xmapper/{dataset}-{genome}-{read_length}/se.bam")
    input:
        binary="bin/x-mapper-1.1.0-beta13.jar",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    log:
        "results/xmapper/{dataset}-{genome}-{read_length}/se.bam.log"
    threads: 8
    shell:
        # TODO
        # X-Mapper outputs multiple primary alignments, which sometimes differ
        # by score. The following option possibly achieves that no
        # suboptimal alignments are output, but we found it too late. Instead,
        # these are filtered out in get_accuracy.py.
        # " --max-penalty-span 0"
        "cat {input} > /dev/null; "
        "/usr/bin/time -v"
        " java -Xms200m -Xmx20g"
        " -jar {input.binary}"
        " --num-threads {threads}"
        " --out-sam /dev/stdout"
        " --reference {input.fasta}"
        " --queries {input.r1_fastq}"
        " 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools sort -n --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

rule xmapper_paired_end:
    output:
        bam=temp("results/xmapper/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        binary="bin/x-mapper-1.1.0-beta13.jar",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    params:
        spacing=lambda wildcards: 300 - 2 * int(wildcards.read_length) if int(wildcards.read_length) < 250 else 700 - 2 * int(wildcards.read_length)
    log:
        "results/xmapper/{dataset}-{genome}-{read_length}/pe.bam.log"
    threads: 8
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v"
        " java -Xms200m -Xmx20g"
        " -jar {input.binary}"
        " --num-threads {threads}"
        " --out-sam /dev/stdout"
        " --reference {input.fasta}"
        " --paired-queries {input.r1_fastq} {input.r2_fastq}"
        "  --spacing {params.spacing} 50"
        " 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools sort -n --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule compile_strobealign:
    output: "bin/strobealign-{name}"
    params:
        commit=lambda wildcards: COMMIT_TO_HASH_MAP[wildcards.name]
    threads: 4
    shell:
        """
        wget https://github.com/ksahlin/strobealign/archive/{params.commit}.zip
        unzip {params.commit}.zip
        rm {params.commit}.zip
        cd strobealign-{params.commit}
        cmake -B build -DCMAKE_C_FLAGS="-march=native" -DCMAKE_CXX_FLAGS="-march=native"
        make -j {threads} -C build strobealign
        mv build/strobealign ../{output}
        cd ..
        rm -rf strobealign-{params.commit}
        """

# Map reads with strobealign

rule strobealign_paired_end:
    output:
        bam=temp("results/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        binary="bin/strobealign-{program}",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    threads: 8
    log:
        "results/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bin/strobealign-{wildcards.program} -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule strobealign_single_end:
    output:
        bam=temp("results/strobealign-{program}/{dataset}-{genome}-{read_length}/se.bam")
    input:
        binary="bin/strobealign-{program}",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    threads: 8
    log:
        "results/strobealign-{program}/{dataset}-{genome}-{read_length}/se.bam.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bin/strobealign-{wildcards.program} -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule strobealign_paf_paired_end:
    output:
        paf=temp("results/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.paf.gz")
    input:
        binary="bin/strobealign-{program}",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    threads: 8
    log:
        "results/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.paf.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bin/strobealign-{wildcards.program} -x -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


rule strobealign_paf_single_end:
    output:
        paf=temp("results/strobealign-{program}/{dataset}-{genome}-{read_length}/se.paf.gz")
    input:
        binary="bin/strobealign-{program}",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    threads: 8
    log:
        "results/strobealign-{program}/{dataset}-{genome}-{read_length}/se.paf.log"
    shell:
        "cat {input} > /dev/null; "
        "/usr/bin/time -v bin/strobealign-{wildcards.program} -x -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp | igzip > {output.paf}.tmp.gz"
        "\n mv -v {output.paf}.tmp.gz {output.paf}"
        "\n mv -v {log}.tmp {log}"


rule bam_accuracy:
    output:
        txt="results/{program}/{dataset}-{genome}-{read_length}/{ends}.bam.accuracy.txt"
    input:
        truth="datasets/{dataset}/{genome}-{read_length}/truth.bam",
        bam="results/{program}/{dataset}-{genome}-{read_length}/{ends}.bam",
    params:
        only_r1=lambda w: " --only-r1" if w.ends == "se" else "",
        extra=lambda w: " --multiple-primary --synthesize-unmapped" if w.program == "xmapper" else ""
    shell:
        "python get_accuracy.py{params.extra}{params.only_r1} --truth {input.truth} --predicted_sam {input.bam} > {output.txt}.tmp"
        "\n mv -v {output.txt}.tmp {output.txt}"


rule paf_accuracy:
    output:
        txt="results/{program}/{dataset}-{genome}-{read_length}/{ends}.paf.accuracy.txt"
    input:
        truth="datasets/{dataset}/{genome}-{read_length}/truth.bam",
        paf="results/{program}/{dataset}-{genome}-{read_length}/{ends}.paf.gz"
    params:
        only_r1=lambda w: " --only-r1" if w.ends == "se" else ""
    shell:
        "python get_accuracy.py{params.only_r1} --truth {input.truth} --predicted_paf {input.paf} > {output.txt}.tmp"
        "\n mv -v {output.txt}.tmp {output.txt}"


rule result_csv:
    output:
        csv="results/{prog}/{dataset}-{genome}-{read_length}/{ends}.{bampaf}.csv"
    input:
        txt="results/{prog}/{dataset}-{genome}-{read_length}/{ends}.{bampaf}.accuracy.txt",
        log="results/{prog}/{dataset}-{genome}-{read_length}/{ends}.{bampaf}.log",
    params:
        typ=lambda wildcards: "map" if wildcards.bampaf == "paf" else "align"
    shell:
        """
        echo -n {wildcards.prog},{params.typ},{wildcards.dataset},{wildcards.genome},{wildcards.ends},{wildcards.read_length}, > {output.csv}.tmp
        cut -f1-3 {input.txt} | tr '\\t' , | tr -d '\\n' >> {output.csv}.tmp
        user_time=$(awk '/User time/ {{print $NF}}' {input.log})
        memory=$(awk '/Maximum resident/ {{print $NF/1048576}}' {input.log})
        indexing_time=$(awk '/Total time indexing:/ {{print $4}}' {input.log})
        mapping_time=$(awk '/Total time mapping:/ {{print $4}}' {input.log})
        if test -z "${{mapping_time}}"; then mapping_time=$(sed -n -e 's|.* Real time: \\([1-9][0-9.]*\\) sec.*|\\1|p' {input.log}); fi
        echo ,${{mapping_time}},${{memory}} >> {output}.tmp
        mv {output.csv}.tmp {output.csv}
        """

def csvs(wildcards):
    files = expand(
        f"results/{{prog}}/{{dataset}}-{wildcards.genome}-{{read_length}}/{wildcards.ends}.bam.csv",
        prog=PROGRAMS, dataset=DATASETS, read_length=READ_LENGTHS
    )
    files += expand(
        f"results/{{prog}}/{{dataset}}-{wildcards.genome}-{{read_length}}/{wildcards.ends}.paf.csv",
        prog=(prog for prog in PROGRAMS if prog not in {"bwamem", "xmapper"}), dataset=DATASETS, read_length=READ_LENGTHS
    )
    return files


rule concat_csvs:
    output: "results/{genome,([^/]*)}-{ends,(se|pe)}.csv"
    input: csvs
    shell:
        "( echo tool,type,dataset,genome,ends,read_length,aligned,accuracy,overaligned,time,memory ; cat {input} ) > {output}"


rule concat_genome_csvs:
    output: "results/result.csv"
    input: expand("results/{genome}-{ends}.csv", ends=ENDS, genome=GENOMES)
    shell:
        "( head -n 1 {input[0]} ; for f in {input}; do sed 1d $f; done ) > {output}"

rule plot_ends:
    output: expand("plots/ends-{end}-{plot}.pdf", end=ENDS, plot=PLOTS)
    input:
        csv="results/result.csv",
        config="config.yaml",
    shell:
        "python plots.py -c {input.config} {input.csv} plots/"

rule plot_genomes:
    output: expand("plots/genome-{genome}-{plot}.pdf", genome=GENOMES, plot=PLOTS)
    input:
        csv="results/result.csv",
        config="config.yaml",
    shell:
        "python plots.py --genome -c {input.config} {input.csv} plots/"
