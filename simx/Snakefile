DATASETS = ("sim3", "sim4", "sim5")
GENOMES = ("drosophila", "maize", "CHM13", "rye", "ecoli50")
READ_LENGTHS = (50, 75, 100, 150, 200, 300, 500)

LIBRARIES = expand("{dataset}-{genome}-{read_length}", dataset=DATASETS, genome=GENOMES, read_length=READ_LENGTHS)
ENDS = ("pe", "se")

# Strobealign commits
COMMITS = {
    "main-3a97f6b": "3a97f6b817824235a36ca8f9c5710ee533d3ad56",
    "mcs-4ed851a": "4ed851adbe952a1f07c43bc0418fd071bcc6693e",
}

PROGRAMS = expand("strobealign-{commit}", commit=COMMITS) + ["bwamem"]
PLOTS = ("accuracy", "aligned", "time", "memory")

localrules:
    measurement_csv, concat_csvs

rule final:
    input:
        expand("plots/{ends}/{plot}.pdf", ends=ENDS, plot=PLOTS)


# Map reads with BWA-MEM

rule bwa_index:
    output:
        "{genome}.fa.amb",
        "{genome}.fa.ann",
        "{genome}.fa.bwt",
        "{genome}.fa.pac",
        "{genome}.fa.sa"
    input: "{genome}.fa"
    shell:
        "bwa index {input}"


rule bwa_mem_single_end:
    output:
        bam=temp("results/bwamem/{dataset}-{genome}-{read_length}/se.bam")
    input:
        fasta="genomes/{genome}.fa",
        index="genomes/{genome}.fa.bwt",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    threads: 20
    log:
        "results/bwamem/{dataset}-{genome}-{read_length}/se.bam.log"
    shell:
        "/usr/bin/time -v bwa mem -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

rule bwa_mem_paired_end:
    output:
        bam=temp("results/bwamem/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        fasta="genomes/{genome}.fa",
        index="genomes/{genome}.fa.bwt",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    threads: 20
    log:
        "results/bwamem/{dataset}-{genome}-{read_length}/pe.bam.log"
    shell:
        "/usr/bin/time -v bwa mem -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"


rule compile_strobealign:
    output: "bin/strobealign-{name}"
    params:
        commit=lambda wildcards: COMMITS[wildcards.name]
    threads: 4
    shell:
        """
        wget https://github.com/ksahlin/strobealign/archive/{params.commit}.zip
        unzip {params.commit}.zip
        rm {params.commit}.zip
        cd strobealign-{params.commit}
        cmake -B build -DCMAKE_C_FLAGS="-march=native" -DCMAKE_CXX_FLAGS="-march=native"
        make -j {threads} -C build strobealign
        mv build/strobealign ../{output}
        cd ..
        rm -rf strobealign-{params.commit}
        """

# Map reads with strobealign

rule strobealign_paired_end:
    output:
        bam=temp("results/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.bam")
    input:
        binary="bin/strobealign-{program}",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
        r2_fastq="datasets/{dataset}/{genome}-{read_length}/2.fastq.gz",
    threads: 20
    log:
        "results/strobealign-{program}/{dataset}-{genome}-{read_length}/pe.bam.log"
    shell:
        "/usr/bin/time -v bin/strobealign-{wildcards.program} -t {threads} {input.fasta} {input.r1_fastq} {input.r2_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

rule strobealign_single_end:
    output:
        bam=temp("results/strobealign-{program}/{dataset}-{genome}-{read_length}/se.bam")
    input:
        binary="bin/strobealign-{program}",
        fasta="genomes/{genome}.fa",
        r1_fastq="datasets/{dataset}/{genome}-{read_length}/1.fastq.gz",
    threads: 20
    log:
        "results/strobealign-{program}/{dataset}-{genome}-{read_length}/se.bam.log"
    shell:
        "/usr/bin/time -v bin/strobealign-{wildcards.program} -t {threads} {input.fasta} {input.r1_fastq} 2> {log}.tmp"
        " | grep -v '^@PG'"
        " | samtools view --no-PG -o {output.bam}.tmp.bam -"
        "\n mv -v {output.bam}.tmp.bam {output.bam}"
        "\n mv -v {log}.tmp {log}"

# Accuracy for all programs

rule get_accuracy:
    output:
        txt="results/{program}/{dataset}-{genome}-{read_length}/accuracy.{ends}.txt"
    input:
        truth="datasets/{dataset}/{genome}-{read_length}/truth.{ends}.bam",
        bam="results/{program}/{dataset}-{genome}-{read_length}/{ends}.bam"
    shell:
        "python get_accuracy.py --truth {input.truth} --predicted_sam {input.bam} > {output.txt}.tmp"
        "\n mv -v {output.txt}.tmp {output.txt}"


rule result_csv:
    output:
        csv="results/{prog}/{dataset}-{genome}-{read_length}/result.{ends}.csv"
    input:
        txt="results/{prog}/{dataset}-{genome}-{read_length}/accuracy.{ends}.txt",
        log="results/{prog}/{dataset}-{genome}-{read_length}/{ends}.bam.log",
    shell:
        """
        echo -n {wildcards.prog},{wildcards.dataset},{wildcards.genome},{wildcards.read_length}, > {output.csv}.tmp
        cut -f1-3 {input.txt} | tr '\\t' , | tr -d '\\n' >> {output.csv}.tmp
        user_time=$(awk '/User time/ {{print $NF}}' {input.log})
        memory=$(awk '/Maximum resident/ {{print $NF/1048576}}' {input.log})
        indexing_time=$(awk '/Total time indexing:/ {{print $4}}' {input.log})
        mapping_time=$(awk '/Total time mapping:/ {{print $4}}' {input.log})
        echo ,${{mapping_time}},${{memory}} >> {output}.tmp
        mv {output.csv}.tmp {output.csv}
        """

def csvs(wildcards):
    return expand(
        f"results/{{prog}}/{{dataset}}-{wildcards.genome}-{{read_length}}/result.{wildcards.ends}.csv",
        prog=PROGRAMS, dataset=DATASETS, read_length=READ_LENGTHS
    )


rule concat_csvs:
    output: "results/{genome,([^/]*)}-{ends,(se|pe)}.csv"
    input: csvs
    shell:
        "( echo tool,dataset,genome,read_length,aligned,accuracy,overaligned,time,memory ; cat {input} ) > {output}"


rule concat_genome_csvs:
    output: "results/{ends,(se|pe)}.csv"
    input: expand("results/{genome}-{{ends}}.csv", genome=GENOMES)
    shell:
        "( echo tool,dataset,genome,read_length,aligned,accuracy,overaligned,time,memory ; for f in {input}; do sed 1d $f; done ) > {output}"

rule plot_se:
    output: expand("plots/{{ends}}/{plot}.pdf", plot=PLOTS)
    input: csv="results/{ends}.csv"
    params: title=lambda wildcards: "Single" if wildcards.ends == "se" else "Paired"
    shell:
        "python3 plots.py -t '{params.title}-end reads' {input.csv} plots/{wildcards.ends}"
